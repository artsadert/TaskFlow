// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"bytes"
	"fmt"
	"io"
	"strconv"
)

type DeleteMovie struct {
	ID string `json:"id"`
}

type DeleteRevision struct {
	ID string `json:"id"`
}

type DeleteUser struct {
	ID string `json:"id"`
}

type GetMovie struct {
	ID string `json:"id"`
}

type GetRevision struct {
	ID string `json:"id"`
}

type GetUser struct {
	ID string `json:"id"`
}

type Movie struct {
	ID          string   `json:"id"`
	Name        string   `json:"name"`
	Year        *string  `json:"year,omitempty"`
	Genre       []string `json:"genre"`
	Description *string  `json:"description,omitempty"`
	PosterURL   *string  `json:"poster_url,omitempty"`
}

type Mutation struct {
}

type NewMovie struct {
	Name        string   `json:"name"`
	Year        int32    `json:"year"`
	Genre       []string `json:"genre"`
	Description string   `json:"description"`
	PosterURL   string   `json:"poster_url"`
}

type NewRevision struct {
	Rating  int32  `json:"rating"`
	Review  string `json:"review"`
	UserID  string `json:"userId"`
	MovieID string `json:"movieId"`
}

type NewUser struct {
	Name  string `json:"name"`
	Email string `json:"email"`
}

type Query struct {
}

type Revision struct {
	ID        string         `json:"id"`
	User      *User          `json:"user"`
	Movie     *Movie         `json:"movie"`
	Status    RevisionStatus `json:"status"`
	Rating    *int32         `json:"rating,omitempty"`
	Review    *string        `json:"review,omitempty"`
	DateAdded *string        `json:"date_added,omitempty"`
}

type UpdateMovie struct {
	ID          string   `json:"id"`
	Name        string   `json:"name"`
	Year        int32    `json:"year"`
	Genre       []string `json:"genre"`
	Description string   `json:"description"`
	PosterURL   string   `json:"poster_url"`
}

type UpdateRevision struct {
	ID     string         `json:"id"`
	Status RevisionStatus `json:"status"`
	Rating int32          `json:"rating"`
	Review string         `json:"review"`
}

type UpdateUser struct {
	ID    string  `json:"id"`
	Name  *string `json:"name,omitempty"`
	Email *string `json:"email,omitempty"`
}

type User struct {
	ID       string `json:"id"`
	Username string `json:"username"`
	Email    string `json:"email"`
}

type RevisionStatus string

const (
	RevisionStatusWatched RevisionStatus = "WATCHED"
	RevisionStatusPlanned RevisionStatus = "PLANNED"
	RevisionStatusDropped RevisionStatus = "DROPPED"
)

var AllRevisionStatus = []RevisionStatus{
	RevisionStatusWatched,
	RevisionStatusPlanned,
	RevisionStatusDropped,
}

func (e RevisionStatus) IsValid() bool {
	switch e {
	case RevisionStatusWatched, RevisionStatusPlanned, RevisionStatusDropped:
		return true
	}
	return false
}

func (e RevisionStatus) String() string {
	return string(e)
}

func (e *RevisionStatus) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = RevisionStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid RevisionStatus", str)
	}
	return nil
}

func (e RevisionStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *RevisionStatus) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e RevisionStatus) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}
