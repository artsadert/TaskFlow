package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.78

import (
	"context"
	"fmt"
	"strconv"

	"github.com/artsadert/TaskFlow/internal/application/command"
	"github.com/artsadert/TaskFlow/internal/interface/api/graph/model"
	"github.com/google/uuid"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.NewUser) (*model.User, error) {
	command, err := r.user_service.CreateUser(&command.CreateUserCommand{Name: input.Name, Email: input.Email})
	if err != nil {
		return nil, err
	}
	return &model.User{ID: command.Result.Id.String(), Username: command.Result.Name, Email: command.Result.Email}, nil
}

// DeleteUser is the resolver for the deleteUser field.
func (r *mutationResolver) DeleteUser(ctx context.Context, input model.DeleteUser) (*model.User, error) {
	command, err := r.user_service.DeleteUser(&command.DeleteUserCommand{Id: uuid.MustParse(input.ID)})
	if err != nil {
		return nil, err
	}
	return &model.User{ID: command.Result.Id.String(), Username: command.Result.Name, Email: command.Result.Email}, nil
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, input model.UpdateUser) (*model.User, error) {
	// name and email may be empty
	// TODO
	command, err := r.user_service.UpdateUser(&command.UpdateUserCommand{Id: uuid.MustParse(input.ID), Name: *input.Name, Email: *input.Email})
	if err != nil {
		return nil, err
	}
	return &model.User{ID: command.Result.Id.String(), Username: command.Result.Name, Email: command.Result.Email}, nil
}

// CreateMovie is the resolver for the createMovie field.
func (r *mutationResolver) CreateMovie(ctx context.Context, input model.NewMovie) (*model.Movie, error) {
	command, err := r.movie_service.CreateMovie(&command.CreateMovieCommand{
		Name:        input.Name,
		Year:        int(input.Year),
		Genre:       input.Genre,
		Description: input.Description,
		Poster_url:  input.PosterURL,
	})
	if err != nil {
		return nil, err
	}
	return &model.Movie{
		ID:          command.Result.Id.String(),
		Name:        command.Result.Name,
		Year:        strconv.Itoa(command.Result.Year),
		Genre:       command.Result.Genre,
		Description: &command.Result.Description,
		PosterURL:   &command.Result.Poster_url,
	}, nil
}

// DeleteMovie is the resolver for the deleteMovie field.
func (r *mutationResolver) DeleteMovie(ctx context.Context, input model.DeleteMovie) (*model.Movie, error) {
	command, err := r.movie_service.DeleteMovie(&command.DeleteMovieCommand{Id: uuid.MustParse(input.ID)})
	if err != nil {
		return nil, err
	}
	return &model.Movie{
		ID:          command.Result.Id.String(),
		Name:        command.Result.Name,
		Year:        strconv.Itoa(command.Result.Year),
		Genre:       command.Result.Genre,
		Description: &command.Result.Description,
		PosterURL:   &command.Result.Poster_url,
	}, nil
}

// UpdateMovie is the resolver for the updateMovie field.
func (r *mutationResolver) UpdateMovie(ctx context.Context, input model.UpdateMovie) (*model.Movie, error) {
	command, err := r.movie_service.UpdateMovie(&command.UpdateMovieCommand{
		Id:          uuid.MustParse(input.ID),
		Name:        input.Name,
		Year:        int(input.Year),
		Genre:       input.Genre,
		Description: input.Description,
		Poster_url:  input.PosterURL,
	})
	if err != nil {
		return nil, err
	}
	return &model.Movie{
		ID:          command.Result.Id.String(),
		Name:        command.Result.Name,
		Year:        strconv.Itoa(command.Result.Year),
		Genre:       command.Result.Genre,
		Description: &command.Result.Description,
		PosterURL:   &command.Result.Poster_url,
	}, nil

}

// CreateRevision is the resolver for the createRevision field.
func (r *mutationResolver) CreateRevision(ctx context.Context, input model.NewRevision) (*model.Revision, error) {
	command, err := r.revision_service.CreateRevision(&command.CreateRevisionCommand{
		Rating:  int(input.Rating),
		Review:  input.Review,
		UserId:  uuid.MustParse(input.UserID),
		MovieId: uuid.MustParse(input.MovieID),
	})
	if err != nil {
		return nil, err
	}

	user, err := r.user_service.GetUser(uuid.MustParse(input.UserID))
	if err != nil{
		return nil, err
	}


	movie, err := r.movie_service.GetMovie(uuid.MustParse(input.MovieID))
	if err != nil{
		return nil, err
	}

	return &model.Revision{
		ID: command.Result.Id.String(),
		User: command.Result.User
	}, nil
}

// DeleteRevision is the resolver for the deleteRevision field.
func (r *mutationResolver) DeleteRevision(ctx context.Context, input model.DeleteRevision) (*model.Revision, error) {
	panic(fmt.Errorf("not implemented: DeleteRevision - deleteRevision"))
}

// UpdateRevision is the resolver for the updateRevision field.
func (r *mutationResolver) UpdateRevision(ctx context.Context, input model.UpdateRevision) (*model.Revision, error) {
	panic(fmt.Errorf("not implemented: UpdateRevision - updateRevision"))
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	commands, err := r.user_service.GetUsers()
	if err != nil {
		return nil, err
	}

	users := []*model.User{}
	for _, command := range commands.Result {
		users = append(users, &model.User{ID: command.Id.String(), Username: command.Name, Email: command.Email})
	}

	return users, nil
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, input model.GetUser) (*model.User, error) {
	command, err := r.user_service.GetUser(uuid.MustParse(input.ID))
	if err != nil {
		return nil, err
	}

	return &model.User{ID: command.Result.Id.String(), Username: command.Result.Name, Email: command.Result.Email}, nil
}

// Movies is the resolver for the movies field.
func (r *queryResolver) Movies(ctx context.Context) ([]*model.Movie, error) {
	commands, err := r.movie_service.GetMovies()
	if err != nil {
		return nil, err
	}

	movies := []*model.Movie{}

	for _, command := range commands.Result {
		year := strconv.Itoa(command.Year)

		movies = append(movies, &model.Movie{
			ID:          command.Id.String(),
			Name:        command.Name,
			Year:        &year,
			Genre:       command.Genre,
			Description: &command.Description,
			PosterURL:   &command.Poster_url,
		})
	}

	return movies, nil
}

// Movie is the resolver for the movie field.
func (r *queryResolver) Movie(ctx context.Context, input model.GetMovie) (*model.Movie, error) {
	command, err := r.movie_service.GetMovie(uuid.MustParse(input.ID))
	if err != nil {
		return nil, err
	}

	year := strconv.Itoa(command.Result.Year)

	return &model.Movie{
		ID:          command.Result.Id.String(),
		Name:        command.Result.Name,
		Year:        &year,
		Genre:       command.Result.Genre,
		Description: &command.Result.Description,
		PosterURL:   &command.Result.Poster_url,
	}, nil
}

// Revisions is the resolver for the revisions field.
func (r *queryResolver) Revisions(ctx context.Context) ([]*model.Revision, error) {
	commands, err := r.revision_service.GetRevisions()
	if err != nil {
		return nil, err
	}

	revisions := []*model.Revision{}

	for _, command := range commands.Result {
		user, err := r.User(ctx, model.GetUser{ID: command.Id.String()})
		if err != nil {
			return nil, err
		}

		movie, err := r.Movie(ctx, model.GetMovie{ID: command.Id.String()})
		if err != nil {
			return nil, err
		}

		rating := int32(command.Rating)
		date := command.Date_added.String()

		revisions = append(revisions, &model.Revision{
			ID:        command.Id.String(),
			User:      user,
			Movie:     movie,
			Status:    model.RevisionStatus(command.Status),
			Rating:    &rating,
			Review:    &command.Review,
			DateAdded: &date,
		})
	}

	return revisions, nil
}

// Revision is the resolver for the revision field.
func (r *queryResolver) Revision(ctx context.Context, input model.GetRevision) (*model.Revision, error) {
	command, err := r.revision_service.GetRevision(uuid.MustParse(input.ID))
	if err != nil {
		return nil, err
	}

	user, err := r.User(ctx, model.GetUser{ID: command.Result.Id.String()})
	if err != nil {
		return nil, err
	}

	movie, err := r.Movie(ctx, model.GetMovie{ID: command.Result.Id.String()})
	if err != nil {
		return nil, err
	}

	rating := int32(command.Result.Rating)
	date := command.Result.Date_added.String()

	return &model.Revision{
		ID:        command.Result.Id.String(),
		User:      user,
		Movie:     movie,
		Status:    model.RevisionStatus(command.Result.Status),
		Rating:    &rating,
		Review:    &command.Result.Review,
		DateAdded: &date,
	}, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
